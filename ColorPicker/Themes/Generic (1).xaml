<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:ColorPicker">

    <SolidColorBrush x:Key="BaseDarkerColor" Color="#FF1E1E1E"/>
    <SolidColorBrush x:Key="BaseDarkColor" Color="#FF323232"/>
    <SolidColorBrush x:Key="BaseColor" Color="#FF505050"/>
    <SolidColorBrush x:Key="BaseLightColor" Color="#FF646464"/>
    <SolidColorBrush x:Key="BaseHighLightColor" Color="#FF787878"/>
    <SolidColorBrush x:Key="OverColor" Color="#FF5A5A5A"/>
    <SolidColorBrush x:Key="ActiveColor" Color="#FF7D00FF"/>
    <SolidColorBrush x:Key="BaseText" Color="#FFC8C8C8"/>
    <SolidColorBrush x:Key="OverText" Color="Gainsboro"/>
    <SolidColorBrush x:Key="ActiveText" Color="White"/>
    <SolidColorBrush x:Key="ElementGroupBg" Color="#FF323232"/>
    
    <local:HueToColorConverter x:Key="HueToColorConverter"/>
    <local:ValueAngleConverter x:Key="ValueAngleConverter"/>
    <local:DoubleToIntegerStringConverter x:Key="DoubleToIntegerStringConverter"/>
    <local:ColorHexConverter x:Key="ColorToHexConverter"/>
    
    <Style x:Key="ColorPickerTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Margin" Value="2,0,0,0"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Background" Value="{StaticResource BaseDarkerColor}"/>
        <Setter Property="Foreground" Value="{StaticResource BaseText}"/>
    </Style>
    
    <Style x:Key="HsvControlThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="True" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Height="20" Width="20" Canvas.Left="140" Canvas.Top="15">
                        <Ellipse Stroke="White" StrokeThickness="1" Margin="0"/>
                        <Ellipse Stroke="Black" StrokeThickness="2" Margin="2"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:HsvControl}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:HsvControl}">
                    <Grid>
                        <Rectangle>
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                                    <GradientStop Offset="0" Color="#FFFFFFFF"/>
                                    <GradientStop Offset="1" Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Hue, Converter={StaticResource HueToColorConverter}}"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle>
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                    <GradientStop Offset="0" Color="#00000000"/>
                                    <GradientStop Offset="1" Color="#FF000000"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Grid>
                            <Border BorderBrush="#A0808080" BorderThickness="1,1,0,0"/>
                            <Border BorderBrush="#A0F0F0F0" BorderThickness="0,0,1,1"/>
                        </Grid>
                        <Canvas ClipToBounds="true">
                            <Thumb Canvas.Left="-5" Canvas.Top="-5" x:Name="PART_Thumb" Style="{StaticResource HsvControlThumbStyle}">
                                <Thumb.RenderTransform>
                                    <TranslateTransform X="0" Y="0"/>
                                </Thumb.RenderTransform>
                            </Thumb>
                        </Canvas>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColorPickerRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColorSliderThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Width="15" Height="auto" Background="Transparent">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.2*"/>
                            <RowDefinition Height="0.2*"/>
                            <RowDefinition Height="0.2*"/>
                        </Grid.RowDefinitions>
                        <Viewbox Grid.Row="0" Stretch="Uniform">
                            <Grid>
                                <Polygon Stretch="Uniform" Fill="{StaticResource BaseLightColor}" Points="0,0.0 15,0 7.5,10" Stroke="Gray" StrokeThickness="1" VerticalAlignment="Top"/>
                            </Grid>
                        </Viewbox>
                        <Viewbox Grid.Row="2">
                            <Polygon Fill="{StaticResource BaseLightColor}" Points="0,11 7.5,0 15,11" Stroke="Gray" StrokeThickness="1" VerticalAlignment="Bottom"/>
                        </Viewbox>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SpectrumSliderThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Background="Transparent" Width="16" Height="9">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6" />
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Polygon Grid.Column="0" Stroke="White" StrokeThickness="1" Fill="Black" Points="0.5,0  5.5,4.5  0.5,9"/>
                        <Polygon Grid.Column="2" Stroke="White" StrokeThickness="1" Fill="Black" Points="5.5,0  0.5,4.5  5.5,9"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:SpectrumSlider}">
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="Maximum" Value="360"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SpectrumSlider}">
                    <Grid>
                        <Grid >
                            <Border Margin="0" Background="{TemplateBinding Background}"/>
                        </Grid>
                        <Track Margin="-7.5,0,-7.5,0" x:Name="PART_Track">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource ColorPickerRepeatButtonStyle}" Command="{x:Static Slider.DecreaseLarge}" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource ColorPickerRepeatButtonStyle}" Command="{x:Static Slider.IncreaseLarge}" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb x:Name="Thumb" Style="{StaticResource ColorSliderThumbStyle}"/>
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ColorSlider}">
        <Setter Property="Maximum" Value="255"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ColorSlider}">
                    <Border>
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LeftColor}" Offset="0"/>
                                <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RightColor}" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>
                        <Track Margin="-7.5,0,-7.5,0" x:Name="PART_Track">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource ColorPickerRepeatButtonStyle}" Command="{x:Static Slider.DecreaseLarge}" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource ColorPickerRepeatButtonStyle}" Command="{x:Static Slider.IncreaseLarge}" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb x:Name="Part_Thumb" Style="{StaticResource ColorSliderThumbStyle}">
                                    <Thumb.RenderTransform>
                                        <TranslateTransform Y="0"/>
                                    </Thumb.RenderTransform>
                                </Thumb>
                            </Track.Thumb>
                        </Track>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:HSVSlider}">
        <Setter Property="Maximum" Value="255"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:HSVSlider}">
                    <Border>
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LeftColor}" Offset="0"/>
                                <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RightColor}" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>
                        <Track Grid.Row="1" Margin="-7.5,0,-7.5,0" x:Name="PART_Track" >
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource ColorPickerRepeatButtonStyle}" Command="{x:Static Slider.DecreaseLarge}" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource ColorPickerRepeatButtonStyle}" Command="{x:Static Slider.IncreaseLarge}" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb x:Name="Part_Thumb" Style="{StaticResource ColorSliderThumbStyle}"/>
                            </Track.Thumb>
                        </Track>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:HueWheel}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Maximum" Value="360"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="Part_Slider" TargetType="{x:Type local:HueWheel}">
                    <Grid x:Name="PART_FirstCanvas" Background="Transparent" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Image x:Name="HueImage" Stretch="Fill" Source="/ColorPicker;component/Assets/HueCircle.png" Height="300" Width="300" RenderTransformOrigin="0.5,0.5"/>
                        <Canvas x:Name="PART_SecondCanvas">
                            <Grid Height="20" Width="20" Canvas.Left="140" Canvas.Top="15">
                                <Ellipse Stroke="White" StrokeThickness="1" Margin="0"/>
                                <Ellipse Stroke="Black" StrokeThickness="2" Margin="2"/>
                            </Grid>

                            <Canvas.RenderTransform>
                                <RotateTransform CenterX="150" CenterY="150">
                                    <RotateTransform.Angle>
                                        <MultiBinding Converter="{StaticResource ValueAngleConverter}">
                                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Value"/>
                                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Minimum"/>
                                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Maximum"/>
                                        </MultiBinding>
                                    </RotateTransform.Angle>
                                </RotateTransform>
                            </Canvas.RenderTransform>
                        </Canvas>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333"/>
    <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333"/>
    
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}" Margin="4">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false"  Stroke="{StaticResource BaseColor}" StrokeThickness="2" VerticalAlignment="Center"/>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource BaseColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{StaticResource BaseText}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ColorPicker}" x:Key="{x:Type local:ColorPicker}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ColorPicker}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <StackPanel>
                            <Grid Grid.Row="0" Margin="4">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="0.70*"/>
                                    <ColumnDefinition Width="0.30*"/>
                                </Grid.ColumnDefinitions>
                                <Rectangle x:Name="CurrentColor" Grid.Column="0" Margin="5,0,0,0" Stroke="{StaticResource BaseLightColor}" StrokeThickness="1">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{Binding SelectedColor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorPicker}}}"/>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <local:ColorHex x:Name="PART_ColorHex" Grid.Column="1" VerticalContentAlignment="Center" Style="{StaticResource ColorPickerTextBox}" Validation.ErrorTemplate="{x:Null}" Text="{Binding SelectedColor, Converter={StaticResource ColorToHexConverter},  RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorPicker}}}"/>
                            </Grid>
                            <Border BorderThickness="2">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{Binding SelectedColor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorPicker}}}"/>
                                </Border.BorderBrush>
                                <Viewbox>
                                    <Grid Margin="4">
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                            <ColumnDefinition/>
                                            <ColumnDefinition/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>

                                        <local:HueWheel x:Name="PART_HueWheel" Grid.RowSpan="4" Grid.ColumnSpan="4" Padding="4"/>
                                        <local:HsvControl x:Name="PART_HsvControl" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Grid.RowSpan="2"/>
                                    </Grid>
                                </Viewbox>

                            </Border>
                            <Expander Header="COLOR CONTROLS" Style="{StaticResource ExpanderStyle}" IsExpanded="False">
                                <Grid Margin="4">
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Grid Grid.Row="1" Margin="0, 1, 0, 1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="0.1*"/>
                                            <ColumnDefinition Width="0.8*"/>
                                            <ColumnDefinition Width="0.15*"/>
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Column="0" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="{DynamicResource BaseText}" >
                                            <Viewbox StretchDirection="DownOnly" Stretch="Uniform">
                                                <TextBlock x:Name="RedTextBox" Text="R" HorizontalAlignment="Center" />
                                            </Viewbox>
                                        </Label>
                                        <local:ColorSlider x:Name="PART_RedColorSlider" Grid.Column="1"/>
                                        <Border Grid.Column="2" Background="{StaticResource BaseColor}">
                                            <local:ColorText x:Name="PART_RedTextBox" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Style="{StaticResource ColorPickerTextBox}" Text="{Binding Path=Value, ElementName=PART_RedColorSlider, Mode=TwoWay, Converter={StaticResource DoubleToIntegerStringConverter}}"/>
                                        </Border>
                                    </Grid>
                                    <Grid Grid.Row="2" Margin="0, 1, 0, 1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="0.1*"/>
                                            <ColumnDefinition Width="0.8*"/>
                                            <ColumnDefinition Width="0.15*"/>
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Column="0" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="{DynamicResource BaseText}">
                                            <Viewbox StretchDirection="DownOnly" Stretch="Uniform">
                                                <TextBlock x:Name="GreenTextBox" Text="G" HorizontalAlignment="Center"/>
                                            </Viewbox>
                                        </Label>
                                        <local:ColorSlider x:Name="PART_GreenColorSlider" Grid.Column="1"/>
                                        <Border Grid.Column="2" Background="{StaticResource BaseColor}">
                                            <local:ColorText x:Name="PART_GreenTextBox" Grid.Column="2"  HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Style="{StaticResource ColorPickerTextBox}" Text="{Binding Path=Value, ElementName=PART_GreenColorSlider, Mode=TwoWay, Converter={StaticResource DoubleToIntegerStringConverter}}"/>
                                        </Border>
                                    </Grid>
                                    <Grid Grid.Row="3" Margin="0, 1, 0, 2">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="0.1*"/>
                                            <ColumnDefinition Width="0.8*"/>
                                            <ColumnDefinition Width="0.15*"/>
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Column="0" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"  Foreground="{DynamicResource BaseText}">
                                            <Viewbox StretchDirection="DownOnly" Stretch="Uniform" >
                                                <TextBlock x:Name="BlueTextBox" Text="B" HorizontalAlignment="Center"/>
                                            </Viewbox>
                                        </Label>
                                        <local:ColorSlider x:Name="PART_BlueColorSlider" Grid.Column="1"/>
                                        <Border Grid.Column="2" Background="{StaticResource BaseColor}">
                                            <local:ColorText x:Name="PART_BlueTextBox" Grid.Column="2"  HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Style="{StaticResource ColorPickerTextBox}" Text="{Binding Path=Value, ElementName=PART_BlueColorSlider, Mode=TwoWay, Converter={StaticResource DoubleToIntegerStringConverter}}"/>
                                        </Border>
                                    </Grid>
                                    <Grid Grid.Row="4" Margin="0, 2, 0, 1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="0.1*"/>
                                            <ColumnDefinition Width="0.8*"/>
                                            <ColumnDefinition Width="0.15*"/>
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Column="0" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="{DynamicResource BaseText}">
                                            <Viewbox  Stretch="Uniform" StretchDirection="DownOnly">
                                                <TextBlock x:Name="HueTextBox" Text="H" HorizontalAlignment="Center"/>
                                            </Viewbox>
                                        </Label>
                                        <local:SpectrumSlider x:Name="PART_HueSlider" Grid.Column="1"/>
                                        <Border Grid.Column="2" Background="{StaticResource BaseColor}">
                                            <local:ColorText x:Name="PART_HueTextBox" Grid.Column="2"  HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Style="{StaticResource ColorPickerTextBox}" Text="{Binding Path=Value, ElementName=PART_HueSlider, Mode=TwoWay, Converter={StaticResource DoubleToIntegerStringConverter}}"/>
                                        </Border>
                                    </Grid>
                                    <Grid Grid.Row="5" Margin="0, 1, 0, 1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="0.1*"/>
                                            <ColumnDefinition Width="0.8*"/>
                                            <ColumnDefinition Width="0.15*"/>
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Column="0" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="{DynamicResource BaseText}">
                                            <Viewbox StretchDirection="DownOnly" Stretch="Uniform">
                                                <TextBlock x:Name="SatTextBox" Text="S" HorizontalAlignment="Center"/>
                                            </Viewbox>
                                        </Label>
                                        <local:HSVSlider x:Name="PART_SatSlider" Grid.Column="1"/>
                                        <Border Grid.Column="2" Background="{StaticResource BaseColor}">
                                            <local:ColorText x:Name="PART_SatTextBox" Grid.Column="2"  HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Style="{StaticResource ColorPickerTextBox}" Text="{Binding Path=Value, ElementName=PART_SatSlider, Mode=TwoWay, Converter={StaticResource DoubleToIntegerStringConverter}}"/>
                                        </Border>
                                    </Grid>
                                    <Grid Grid.Row="6" Margin="0, 1, 0, 1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="0.1*"/>
                                            <ColumnDefinition Width="0.8*"/>
                                            <ColumnDefinition Width="0.15*"/>
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Column="0" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="{DynamicResource BaseText}">
                                            <Viewbox StretchDirection="DownOnly" Stretch="Uniform">
                                                <TextBlock x:Name="ValTextBox" Text="V" HorizontalAlignment="Center"/>
                                            </Viewbox>
                                        </Label>
                                        <local:HSVSlider x:Name="PART_ValSlider" Grid.Column="1"/>
                                        <Border Grid.Column="2" Background="{StaticResource BaseColor}">
                                            <local:ColorText x:Name="PART_ValTextBox" Grid.Column="2"  HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Style="{StaticResource ColorPickerTextBox}" Text="{Binding Path=Value, ElementName=PART_ValSlider, Mode=TwoWay, Converter={StaticResource DoubleToIntegerStringConverter}}"/>
                                        </Border>
                                    </Grid>
                                    <Grid Grid.Row="7" Margin="0, 4, 0, 4" Visibility="Visible">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="0.1*"/>
                                            <ColumnDefinition Width="0.8*"/>
                                            <ColumnDefinition Width="0.15*"/>
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Column="0" HorizontalContentAlignment="Center"  Foreground="{DynamicResource BaseText}" VerticalContentAlignment="Center">
                                            <Viewbox StretchDirection="DownOnly" Stretch="Uniform">
                                                <TextBlock x:Name="AlphaTextBox" Text="A" HorizontalAlignment="Center"/>
                                            </Viewbox>
                                        </Label>
                                        <local:ColorSlider x:Name="PART_AlphaColorSlider" Grid.Column="1"/>
                                        <local:ColorText x:Name="PART_AlphaTextBox" Grid.Column="2"  HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Style="{StaticResource ColorPickerTextBox}" Text="{Binding Path=Value, ElementName=PART_AlphaColorSlider, Mode=TwoWay, Converter={StaticResource DoubleToIntegerStringConverter}}"/>
                                    </Grid>
                                </Grid>
                            </Expander>

                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>